# folder containing sources :
SRC =src

# to avoid some bugs if the PVCOLLIB_HOME is not well defined, we let a small check here
ifeq ($(findstring \,$(PVCOLLIB_HOME)),\)
$(error "PVCOLLIB_HOME environment variable is not defined correctly: the path must be in Unix style (on Windows operating system too!). For example, use /c/colecodev instead of c:\colecodev")
endif

#---------------------------------------------------------------------------------
# path to tools
#---------------------------------------------------------------------------------
export PATH	:=	$(PVCOLLIB_HOME)/devkitcol/bin:$(PATH)

CVLIB	:=	$(PVCOLLIB_HOME)/pvcollib
LIBDIRCVL = $(CVLIB)/lib
INCDIRCVL = $(CVLIB)/include
LIBOBJS :=	$(LIBDIRCVL)/collib.lib $(LIBDIRCVL)/crtcol.rel

#---------------------------------------------------------------------------------
# the compiler executables
#---------------------------------------------------------------------------------

export CC	:=	$(PVCOLLIB_HOME)/devkitcol/bin/sdcc
export AS	:=	$(PVCOLLIB_HOME)/devkitcol/bin/sdasz80
export LD	:=	$(PVCOLLIB_HOME)/devkitcol/bin/sdcc
export LK :=	$(PVCOLLIB_HOME)/devkitcol/bin/sdcclib

export GFXCONV	:=	$(PVCOLLIB_HOME)/devkitcol/tools/gfx2col
export LDMEGA	:=	$(PVCOLLIB_HOME)/devkitcol/tools/cvmkcart

#---------------------------------------------------------------------------------
# Add default flag for compiling
#---------------------------------------------------------------------------------
#vc Display errors and warnings using MSVC style
MAX_ALLOCS_PER_NODE=20000
CFLAGS += -mz80 -I$(CVLIB)/include -I$(PVCOLLIB_HOME)/devkitcol/include --std-c99 --opt-code-size --fverbose-asm --max-allocs-per-node $(MAX_ALLOCS_PER_NODE) --vc -c 
ASFLAGS += -I$(PVCOLLIB_HOME)/devkitcol/include
LDFLAGS += -mz80 --no-std-crt0  --code-loc 0x8048 --data-loc 0x7000 

#---------------------------------------------------------------------------------
# Search all .asm and .c files until 3rd level in the tree
#---------------------------------------------------------------------------------
CFILES = $(wildcard *.c)
CFILES+= $(wildcard $(SRC)/*.c)
CFILES+= $(wildcard $(SRC)/*/*.c)
CFILES+= $(wildcard $(SRC)/*/*/*.c)

SFILES := $(SFILES) $(wildcard *.s)
SFILES := $(SFILES) $(wildcard $(SRC)/*.s)
SFILES := $(SFILES) $(wildcard $(SRC)/*/*.s)
SFILES := $(SFILES) $(wildcard $(SRC)/*/*/*.s)

export OFILES	:=	$(BINFILES:.bin=.obj) $(SFILES:.s=.rel) $(CFILES:.c=.rel)

# The first rule available in makefile become the default one
# We want "all" as default rule, but we will declare it later !
.DEFAULT_GOAL := all

#---------------------------------------------------------------------------------
%.rel: %.c
	@echo Compiling C to .rel ... $(notdir $<)
	$(CC) $(CFLAGS) $< -o $@ 
	@rm $*.lst
	@rm $*.asm

#---------------------------------------------------------------------------------
%.rel: %.s
	@echo Compiling ASM to .rel ... $(notdir $<)
	$(AS) $(ASFLAGS) -o $*.rel $<

#---------------------------------------------------------------------------------
%.rom: $(OFILES)
	@echo Linking ... $(notdir $@)
	$(LD) $(LDFLAGS)  $(LIBOBJS) $(OFILES)
	sdobjcopy -R .sec5 -I ihex -O binary --pad-to 0xffff --gap-fill 0xff crtcol.ihx $(ROMNAME).rom
	@mv crtcol.map $(ROMNAME).map
	@grep "^_" $(ROMNAME).map
	@echo
	@echo Build finished successfully !
	@echo
    
.PHONY: cleanRom cleanGfx

cleanRom:
	@echo clean rom
	@rm -f $(ROMNAME).rom $(ROMNAME).sym $(ROMNAME).map $(ROMNAME).rel *.rel *.sym crtcol.ihx crtcol.lk crtcol.noi
	
cleanGfx:
	@echo clean graphics data
	@rm -f *gfx.h *gfx.inc

    